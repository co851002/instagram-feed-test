@import url(http://fonts.googleapis.com/css?family=Roboto+Slab|Open+Sans:400italic,700italic,400,700);@import url(https://fonts.googleapis.com/css?family=Montserrat:300,400,600);/* http://meyerweb.com/eric/tools/css/reset/
   v2.0 | 20110126
   License: none (public domain)
*/

a,
abbr,
acronym,
address,
applet,
article,
aside,
audio,
b,
big,
blockquote,
body,
canvas,
caption,
center,
cite,
code,
dd,
del,
details,
dfn,
div,
dl,
dt,
em,
embed,
fieldset,
figcaption,
figure,
footer,
form,
h1,
h2,
h3,
h4,
h5,
h6,
header,
hgroup,
html,
i,
iframe,
img,
ins,
kbd,
label,
legend,
li,
mark,
menu,
nav,
object,
ol,
output,
p,
pre,
q,
ruby,
s,
samp,
section,
small,
span,
strike,
strong,
sub,
summary,
sup,
table,
tbody,
td,
tfoot,
th,
thead,
time,
tr,
tt,
u,
ul,
var,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:after,
blockquote:before {
  content: '';
  content: none;
}

q:after,
q:before {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.visible {
  visibility: visible !important;
}

.hidden {
  visibility: hidden !important;
}

body {
  width: 100%;
  height: 100vh;
  position: relative;
  display: block;
  font-family: "Montserrat", sans-serif;
  font-weight: 400;
  background: #fafafa;
}

body #wrapper {
  max-width: 1230px;
  margin: 0 auto;
}

body #wrapper #instagram-wrapper {
  z-index: 2;
  margin: 0 auto;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

body #wrapper #instagram-wrapper li {
  width: 400px;
  position: relative;
  background: #fff;
  margin: 5px;
  list-style-type: none;
  -ms-flex-pack: distribute;
  justify-content: space-around;
  box-shadow: 1px 1px 9px 1px rgba(0, 0, 0, 0.14);
}

@media (max-width: 700px) {
  body #wrapper #instagram-wrapper li {
    width: 100%;
  }
}

body #wrapper #instagram-wrapper li a.header {
  height: 40px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin: 16px;
  text-decoration: none;
  color: #262626;
}

body #wrapper #instagram-wrapper li a.header img {
  max-width: 40px;
  height: 40px;
  border-radius: 30px;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -ms-flex-direction: row;
  flex-direction: row;
}

body #wrapper #instagram-wrapper li a.header span {
  font-size: 16px;
  line-height: 36px;
  margin-left: 15px;
}

body #wrapper #instagram-wrapper li a.header span:last-child {
  display: none;
}

body #wrapper #instagram-wrapper li span.instagram-post img {
  width: 100%;
}

body #wrapper #instagram-wrapper li div.post-info {
  padding: 15px 8px;
  font-size: 1.1em;
  line-height: 1.3em;
}

body #wrapper #instagram-wrapper li div.post-info a.like-post {
  background-image: url(https://www.instagram.com/static/bundles/sprite_core.png/db9f2a937bb8.png);
  background-repeat: no-repeat;
  background-position: -216px -352px;
  height: 29px;
  width: 29px;
  display: inline-block;
  margin: 8px 0 8px 0;
  cursor: pointer;
}

body #wrapper #instagram-wrapper li div.post-info a.comment-post {
  background-image: url(https://www.instagram.com/static/bundles/sprite_core.png/db9f2a937bb8.png);
  background-repeat: no-repeat;
  background-position: -346px -352px;
  height: 29px;
  width: 29px;
  display: inline-block;
  margin: 8px;
  cursor: pointer;
}

body #wrapper #instagram-wrapper li div.post-info span.post-likes {
  display: block;
  margin-bottom: 10px;
  font-size: 1.1em;
}

body #wrapper #instagram-wrapper li div.post-info span.post-comments {
  display: none;
}

body #wrapper #instagram-wrapper li div.post-info span.post-headline a {
  text-decoration: none;
  color: #003569;
}

body #wrapper #instagram-wrapper li div.post-info span.post-tags {
  display: inline;
}

body #wrapper #instagram-wrapper li div.post-info span.post-tags a {
  color: #003569;
  text-decoration: none;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/